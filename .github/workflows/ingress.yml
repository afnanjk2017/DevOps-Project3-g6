name: Deploy Monitoring Stack to AKS

on:
  workflow_dispatch:
    inputs:
      resource_group:
        description: 'Azure Resource Group Name'
        required: true
        default: 'rg-burgerbuilder'
      cluster_name:
        description: 'AKS Cluster Name'
        required: true
        default: 'aks-burgerbuilder'
      environment:
        description: 'Environment (dev/staging/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
  push:
    branches:
      - main
      - develop
    paths:
      - 'k8s/**'
      - 'scripts/**'
      - '.github/workflows/deploy-monitoring.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'k8s/**'
      - 'scripts/**'
      - '.github/workflows/deploy-monitoring.yml'

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

jobs:
  validate:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Validate YAML files
        run: |
          echo "Validating Kubernetes manifests..."
          for file in k8s/**/*.yaml; do
            if [ -f "$file" ]; then
              echo "Validating $file"
              kubectl --dry-run=client apply -f "$file" || exit 1
            fi
          done
          echo "All YAML files are valid"

  deploy:
    name: Deploy Monitoring Stack
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name != 'pull_request'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ github.event.inputs.resource_group || 'rg-burgerbuilder' }} \
            --name ${{ github.event.inputs.cluster_name || 'aks-burgerbuilder' }} \
            --overwrite-existing

      - name: Add Helm repositories
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

      - name: Install NGINX Ingress Controller
        run: |
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --set controller.service.type=LoadBalancer \
            --set controller.replicaCount=2 \
            --set controller.resources.requests.cpu=100m \
            --set controller.resources.requests.memory=128Mi \
            --set controller.resources.limits.cpu=500m \
            --set controller.resources.limits.memory=512Mi \
            --wait \
            --timeout=10m

      - name: Wait for Ingress Controller
        run: |
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=300s

      - name: Install Prometheus
        run: |
          helm upgrade --install prometheus prometheus-community/prometheus \
            --namespace monitoring \
            --create-namespace \
            --set server.persistentVolume.enabled=true \
            --set server.persistentVolume.size=10Gi \
            --set server.resources.requests.cpu=200m \
            --set server.resources.requests.memory=256Mi \
            --set server.resources.limits.cpu=1000m \
            --set server.resources.limits.memory=1Gi \
            --set alertmanager.enabled=true \
            --set alertmanager.persistentVolume.enabled=true \
            --set alertmanager.persistentVolume.size=5Gi \
            --set pushgateway.enabled=true \
            --set nodeExporter.enabled=true \
            --set kubeStateMetrics.enabled=true \
            --wait \
            --timeout=10m

      - name: Install Grafana
        run: |
          helm upgrade --install grafana grafana/grafana \
            --namespace monitoring \
            --set adminPassword=admin123 \
            --set persistence.enabled=true \
            --set persistence.size=10Gi \
            --set resources.requests.cpu=200m \
            --set resources.requests.memory=256Mi \
            --set resources.limits.cpu=1000m \
            --set resources.limits.memory=1Gi \
            --wait \
            --timeout=10m

      - name: Apply Ingress Configuration
        run: |
          kubectl apply -f k8s/monitoring/ingress.yaml

      - name: Wait for Monitoring Services
        run: |
          kubectl wait --namespace monitoring \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/name=prometheus \
            --timeout=300s
          
          kubectl wait --namespace monitoring \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/name=grafana \
            --timeout=300s

      - name: Get External IP
        id: get-external-ip
        run: |
          EXTERNAL_IP=$(kubectl get service ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z "$EXTERNAL_IP" ]; then
            echo "External IP not yet assigned"
            echo "external_ip=" >> $GITHUB_OUTPUT
          else
            echo "External IP: $EXTERNAL_IP"
            echo "external_ip=$EXTERNAL_IP" >> $GITHUB_OUTPUT
          fi

      - name: Display Access Information
        run: |
          if [ -n "${{ steps.get-external-ip.outputs.external_ip }}" ]; then
            echo "üéâ Monitoring stack deployed successfully!"
            echo ""
            echo "Access URLs:"
            echo "  Prometheus: http://${{ steps.get-external-ip.outputs.external_ip }}/prometheus"
            echo "  Grafana: http://${{ steps.get-external-ip.outputs.external_ip }}/grafana"
            echo "  Grafana credentials: admin / admin123"
            echo ""
            echo "To get the external IP later, run:"
            echo "  kubectl get service ingress-nginx-controller -n ingress-nginx"
          else
            echo "‚ö†Ô∏è External IP not yet assigned. Please wait a few minutes and check:"
            echo "  kubectl get service ingress-nginx-controller -n ingress-nginx"
          fi

      - name: Create Deployment Summary
        run: |
          cat << EOF > deployment-summary.md
          # Monitoring Stack Deployment Summary
          
          **Deployment Time:** $(date)
          **Environment:** ${{ github.event.inputs.environment || 'dev' }}
          **Resource Group:** ${{ github.event.inputs.resource_group || 'rg-burgerbuilder' }}
          **Cluster Name:** ${{ github.event.inputs.cluster_name || 'aks-burgerbuilder' }}
          
          ## Components Deployed
          - ‚úÖ NGINX Ingress Controller
          - ‚úÖ Prometheus (with Alertmanager, Node Exporter, Kube State Metrics)
          - ‚úÖ Grafana
          - ‚úÖ Ingress Configuration
          
          ## Access Information
          EOF
          
          if [ -n "${{ steps.get-external-ip.outputs.external_ip }}" ]; then
            cat << EOF >> deployment-summary.md
          - **Prometheus:** http://${{ steps.get-external-ip.outputs.external_ip }}/prometheus
          - **Grafana:** http://${{ steps.get-external-ip.outputs.external_ip }}/grafana
          - **Grafana Credentials:** admin / admin123
          EOF
          else
            cat << EOF >> deployment-summary.md
          - **External IP:** Not yet assigned (check in a few minutes)
          - **Command to check:** kubectl get service ingress-nginx-controller -n ingress-nginx
          EOF
          fi
          
          cat << EOF >> deployment-summary.md
          
          ## Verification Commands
          \`\`\`bash
          # Check all pods
          kubectl get pods --all-namespaces
          
          # Check services
          kubectl get services --all-namespaces
          
          # Check ingress
          kubectl get ingress --all-namespaces
          \`\`\`
          EOF

      - name: Upload Deployment Summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.md

  cleanup:
    name: Cleanup (on failure)
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ github.event.inputs.resource_group || 'rg-burgerbuilder' }} \
            --name ${{ github.event.inputs.cluster_name || 'aks-burgerbuilder' }} \
            --overwrite-existing

      - name: Cleanup Monitoring Stack
        run: |
          echo "Cleaning up monitoring stack due to deployment failure..."
          kubectl delete -f k8s/monitoring/ingress.yaml --ignore-not-found=true
          helm uninstall grafana -n monitoring --ignore-not-found=true
          helm uninstall prometheus -n monitoring --ignore-not-found=true
          helm uninstall ingress-nginx -n ingress-nginx --ignore-not-found=true
          kubectl delete namespace monitoring --ignore-not-found=true
          kubectl delete namespace ingress-nginx --ignore-not-found=true
          echo "Cleanup completed"
