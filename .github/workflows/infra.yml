name: build infrastructure

on:
  # push:
  #   paths:
  #     - "infra/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose environment"
        required: true
        default: "dev"

jobs:
  create-resources:
    env:
      TF_VAR_ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
      TF_VAR_db_password: ${{secrets.db_password}}
      TF_VAR_storage_rg: ${{ secrets.storage_rg }}
      TF_VAR_keytf: ${{ secrets.keytf }}
      TF_VAR_blob_con: ${{ secrets.blob_con }}
      TF_VAR_storage_ac: ${{ secrets.storage_ac }}

    name: "Builds the infrastructure on Azure"

    runs-on: ubuntu-latest
    steps:
      - name: "Checkout the branch"

        uses: "actions/checkout@v5"

      - name: Azure Login (Service Principal)
        uses: azure/login@v2
        with:
          creds: ${{secrets.AZURE_CREDS}}

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2

      - name: "Initialize Terraform"
        working-directory: ./infra
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.STORAGE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.STORAGE_AC }}" \
            -backend-config="container_name=${{ secrets.BLOB_CON }}" \
            -backend-config="key=${{ secrets.keytf }}"

      - name: Run Terraform Plan
        working-directory: ./infra
        run: terraform plan

      - name: Apply Terraform (Few times due to inconsistent plan errors that just resolve with retry.)
        working-directory: ./infra
        run: terraform apply -auto-approve  || terraform apply -auto-approve  || terraform apply -auto-approve

      - name: Get AKS Details from Terraform Output
        id: aks_output
        working-directory: ./infra
        run: |
          echo "rg_name=$(terraform output -raw rg_name)" >> $GITHUB_OUTPUT
          echo "aks_name=$(terraform output -raw aks_name)" >> $GITHUB_OUTPUT

      - name: Connect to AKS Cluster
        run: |
          az aks get-credentials \
            --resource-group ${{ steps.aks_output.outputs.rg_name }} \
            --name ${{ steps.aks_output.outputs.aks_name }} \
            --overwrite-existing

      - name: Install NGINX Ingress Controller
        run: |
          kubectl create namespace ingress-nginx || true
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --set controller.replicaCount=2 \
            --set controller.nodeSelector."kubernetes\.io/os"=linux \
            --set controller.admissionWebhooks.patch.nodeSelector."kubernetes\.io/os"=linux \
            --set defaultBackend.nodeSelector."kubernetes\.io/os"=linux

      - name: Install Prometheus & Grafana (kube-prometheus-stack)
        run: |
          kubectl create namespace monitoring || true
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --set grafana.service.type=LoadBalancer \
            --set prometheus.service.type=LoadBalancer \
            --set grafana.persistence.enabled=false \
            --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false

      - name: Verify Deployments
        run: |
          kubectl get pods -A
          kubectl get svc -n ingress-nginx
          kubectl get svc -n monitoring
