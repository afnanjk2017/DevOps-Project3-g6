name: deploy to kubernetes

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose environment"
        required: true
        default: "dev"

jobs:
  deploy-k8s:
    name: "Deploy all Kubernetes manifests"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the branch
        uses: actions/checkout@v5

      - name: Azure Login (Service Principal)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDS }}

      - name: Debug Terraform Outputs
        run: |
          echo "RG NAME: ${{ steps.aks_output.outputs.rg_name }}"
          echo "AKS NAME: ${{ steps.aks_output.outputs.aks_name }}"

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2

      - name: Terraform Init
        working-directory: ./infra
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.STORAGE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.STORAGE_AC }}" \
            -backend-config="container_name=${{ secrets.BLOB_CON }}" \
            -backend-config="key=${{ secrets.keytf }}"

      - name: Get AKS Details from Terraform Output
        id: aks_output
        working-directory: ./infra
        run: |
          echo "rg_name=$(terraform output -raw rg_name)" >> $GITHUB_OUTPUT
          echo "aks_name=$(terraform output -raw aks_name)" >> $GITHUB_OUTPUT
          echo "db_server_fqdn=$(terraform output -raw db_server_fqdn)" >> $GITHUB_OUTPUT
          echo "db_name=$(terraform output -raw db_name)" >> $GITHUB_OUTPUT
          echo "db_admin=$(terraform output -raw db_admin)" >> $GITHUB_OUTPUT

      - name: Connect to AKS Cluster
        run: |
          az aks get-credentials \
            --resource-group ${{ steps.aks_output.outputs.rg_name }} \
            --name ${{ steps.aks_output.outputs.aks_name }} \
            --overwrite-existing

      - name: Deploy manifests
        run: |
          set -e
          kubectl get ns dev || kubectl create ns dev

          JDBC_URL="jdbc:sqlserver://${{ steps.aks_output.outputs.db_server_fqdn }}:1433;database=${{ steps.aks_output.outputs.db_name }};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;"
          kubectl -n dev delete secret db-credentials || true
          kubectl -n dev create secret generic db-credentials \
            --from-literal=DB_URL=${JDBC_URL} \
            --from-literal=DB_USERNAME=${{ steps.aks_output.outputs.db_admin }} \
            --from-literal=DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          sudo apt-get update && sudo apt-get install -y gettext-base
          export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          envsubst < k8s/backend/backend-deploy.yml > /tmp/backend-deploy.yml

          # Backend
          kubectl apply -f k8s/backend/backend-svc.yml -n dev
          kubectl apply -f k8s/backend/backend-ingress.yml -n dev
          kubectl apply -f /tmp/backend-deploy.yml -n dev

          # Frontend (apply each manifest for clearer errors)
          kubectl -n dev delete ingress frontend-ingress || true
          kubectl apply -f k8s/frontend/ui-configmap.yml -n dev
          kubectl apply -f k8s/frontend/frontend-clusterip.yml -n dev
          kubectl apply -f k8s/frontend/ui-deploy.yml -n dev
          kubectl apply -f k8s/frontend/frontend-ingress.yml -n dev

          kubectl rollout status deployment/backend-deploy -n dev --timeout=180s
          kubectl rollout status deployment/frontend-deploy -n dev --timeout=180s

      - name: Verify deployments
        run: |
          kubectl get pods -A
          kubectl get svc -A
          kubectl get ingress -A

      - name: Debug routing and backend health
        run: |
          set -x
          kubectl -n dev describe ingress frontend-ingress || true
          kubectl -n dev describe ingress backend-ingress || true
          kubectl -n dev describe svc backend-clusterip || true
          kubectl -n dev get endpoints backend-clusterip -o wide || true
          kubectl -n dev rollout status deployment/backend-deploy --timeout=120s || true
          BACKEND_POD=$(kubectl -n dev get pods -l app=backend-app -o jsonpath='{.items[0].metadata.name}' || true)
          if [ -n "$BACKEND_POD" ]; then
            kubectl -n dev logs "$BACKEND_POD" --tail=200 || true
          fi
          INGRESS_IP=$(kubectl -n ingress-nginx get svc ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true)
          if [ -n "$INGRESS_IP" ]; then
            echo "Trying curl to http://$INGRESS_IP/api/health" || true
            curl -i --max-time 10 "http://$INGRESS_IP/api/health" || true
          fi
